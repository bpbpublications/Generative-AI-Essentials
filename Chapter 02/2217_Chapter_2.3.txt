Data augmentation for NLP using Python. This demo will use the NLTK library to perform basic text augmentation techniques, including synonym replacement and random insertion. 
First, make sure you have NLTK installed. Install it using pip if you do not already have it: 
```bash
pip install nltk
```
Now, let us create a simple Python script for data augmentation: 
```python
import random
from nltk.corpus import wordnet import nltk nltk.download('wordnet') 
# Function to perform synonym replacement def synonym_replacement(words, n=1): 
new_words = words.copy() 
random_word_list = list(set([word for word in words if word not in stop_words])) 
for _ in range(n):
if len(random_word_list) > 0: 
word = random_word_list.pop() synonym = get_synonym(word) If the synonym is not None: 
new_words = [synonym if w == word else w for w in new_words] return new_words 
# Function to get a synonym for a word def get_synonym(word): 
Synonyms = wordnet.synsets(word) if len(synonyms) > 0: 
synonym = synonyms[0].lemmas()[0].name() 
        return synonym
    return None
# Sample text to augment
text = "Data augmentation is a technique used to increase the amount of data." 
# Tokenize the text into words (you can use NLP libraries for more advanced tokenization) 
words = text.split() 
# Perform synonym replacement (you can customize the number of replacements) augmented_text = " ".join(synonym_replacement(words, n=2)) 
print("Original Text:") print(text) print("\nAugmented Text:") print(augmented_text) 
